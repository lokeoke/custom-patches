diff --git a/src/Plugin/QueueWorker/WorkspaceReplication.php b/src/Plugin/QueueWorker/WorkspaceReplication.php
index 92e5147..44e9b63 100644
--- a/src/Plugin/QueueWorker/WorkspaceReplication.php
+++ b/src/Plugin/QueueWorker/WorkspaceReplication.php
@@ -3,6 +3,7 @@
 namespace Drupal\workspace\Plugin\QueueWorker;
 
 use Drupal\Component\Datetime\Time;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Queue\QueueWorkerBase;
 use Drupal\Core\Queue\RequeueException;
@@ -10,6 +11,7 @@ use Drupal\Core\Session\AccountSwitcherInterface;
 use Drupal\Core\State\StateInterface;
 use Drupal\replication\Entity\ReplicationLogInterface;
 use Drupal\user\Entity\User;
+use Drupal\workspace\Entity\Replication;
 use Drupal\workspace\ReplicatorManager;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -25,25 +27,40 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
 class WorkspaceReplication extends QueueWorkerBase implements ContainerFactoryPluginInterface {
 
   /**
+   * The replicator manager.
+   *
    * @var \Drupal\workspace\ReplicatorManager
    */
   protected $replicatorManager;
 
   /**
+   * Time service.
+   *
    * @var \Drupal\Component\Datetime\Time
    */
   protected $time;
 
   /**
+   * The service for safe account switching.
+   *
    * @var \Drupal\Core\Session\AccountSwitcherInterface
    */
   protected $accountSwitcher;
 
   /**
+   * State system service.
+   *
    * @var \Drupal\Core\State\StateInterface
    */
   private $state;
 
+  /**
+   * The logger.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelInterface
+   */
+  protected $logger;
+
   /**
    * {@inheritdoc}
    */
@@ -55,51 +72,66 @@ class WorkspaceReplication extends QueueWorkerBase implements ContainerFactoryPl
       $container->get('workspace.replicator_manager'),
       $container->get('datetime.time'),
       $container->get('account_switcher'),
-      $container->get('state')
+      $container->get('state'),
+      $container->get('logger.factory')
     );
   }
 
   /**
    * {@inheritdoc}
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, ReplicatorManager $replicator_manager, Time $time, AccountSwitcherInterface $account_switcher, StateInterface $state) {
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, ReplicatorManager $replicator_manager, Time $time, AccountSwitcherInterface $account_switcher, StateInterface $state, LoggerChannelFactoryInterface $logger) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
     $this->replicatorManager = $replicator_manager;
     $this->time = $time;
     $this->accountSwitcher = $account_switcher;
     $this->state = $state;
+    $this->logger = $logger->get('workspace');
   }
 
   /**
-   * @param mixed $data
+   * {@inheritdoc}
    *
    * @throws \Drupal\Core\Entity\EntityStorageException
    */
   public function processItem($data) {
     if ($this->state->get('workspace.last_replication_failed', FALSE)) {
       // Requeue if replication blocked.
-      throw new RequeueException('Replication blocked now!');
+      throw new RequeueException('Replication is blocked!');
     }
-    $account = User::load(1);
-    $this->accountSwitcher->switchTo($account);
-    /**
-     * @var \Drupal\workspace\Entity\Replication $replication
-     */
+
+    /** @var \Drupal\workspace\Entity\Replication $replication */
     $replication = $data['replication'];
-    $replication->setReplicationStatusReplicating();
-    $replication->save();
-    $response = $this->replicatorManager->doReplication($data['source'], $data['target'], $data['task']);
-    if (($response instanceof ReplicationLogInterface) && ($response->get('ok')->value == TRUE)) {
-      $replication->setReplicationStatusReplicated();
-      $replication->set('replicated', $this->time->getRequestTime());
+    $this->logger->info('Replication status is "@replication_status".', ['@replication_status' => $replication->get('replication_status')]);
+    if ($replication->get('replication_status') == Replication::QUEUED) {
+      $account = User::load(1);
+      $this->accountSwitcher->switchTo($account);
+
+      $replication->setReplicationStatusReplicating();
       $replication->save();
+      $this->logger->info('Replication "@replication" has started.', ['@replication' => $replication->label()]);
+
+      $response = $this->replicatorManager->doReplication($data['source'], $data['target'], $data['task']);
+      if (($response instanceof ReplicationLogInterface) && ($response->get('ok')->value == TRUE)) {
+        $replication->setReplicationStatusReplicated();
+        $replication->set('replicated', $this->time->getRequestTime());
+        $replication->save();
+        $this->logger->info('Replication "@replication" has finished successfully.', ['@replication' => $replication->label()]);
+      }
+      else {
+        $replication->setReplicationStatusFailed();
+        $replication->save();
+        $this->state->set('workspace.last_replication_failed', TRUE);
+        $this->logger->info('Replication "@replication" has failed.', ['@replication' => $replication->label()]);
+      }
+
+      $this->accountSwitcher->switchBack();
     }
     else {
-      $replication->setReplicationStatusFailed();
-      $replication->save();
-      $this->state->set('workspace.last_replication_failed', TRUE);
+      // Requeue if replication is in progress.
+      $this->logger->info('Replication "@replication" is already in progress.', ['@replication' => $replication->label()]);
+      throw new RequeueException('Replication is already in progress!');
     }
-    $this->accountSwitcher->switchBack();
   }
 
 }
